version: '2.1'
orbs:
  # slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@1.3.0

commands:

  destroy-environment:
    description: Destroying Backend & Frontend Stacks .
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  setup_tools:
    description: Installation of  Neccesary tools
    steps:
      - run:
          name: Installing Tools 
          command: |
            sudo apt update
            sudo apt install -y tar gzip curl software-properties-common

  setup_awscli:
    description: Installation of  AWS Command Line Interface
    steps:
      - run:
          name: Installing AWS CLI 
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  setup_ansible:
    description: Installation Ansible Configuration Management tool
    steps:
      - run:
          name: Installing Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  setup_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0

jobs:
 
# ---------Build phase for frontend and backend apps -------- # 
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build App Backend
          command: |
              cd  backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

# ---------Build phase for frontend and backend apps -------- # 

# ---------Testing phase for frontend and backend apps -------- # 
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Backend Testing
            command: |
                cd backend
                npm install
                npm test

# ---------Testing phase for frontend and backend apps -------- # 

# ---------Deployment of the frontend and backend applications in the infrastructure -------- # 
        
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_awscli
      - setup_ansible
      - setup_nodejs
      - add_ssh_keys:
          fingerprints: ['f0:a2:1b:c4:47:91:69:2e:8d:b1:18:ef:82:6f:6c:0f']
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]  
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Compress and Copy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: Deploying the Backend  app
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
       
workflows:
  default:
    jobs:
      - deploy-backend
   