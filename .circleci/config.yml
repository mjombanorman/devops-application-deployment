version: '2.1'
orbs:
  # slack: circleci/slack@4.1
  # aws-cli: circleci/aws-cli@1.3.0
jobs:
 
# build phase is to compile/lint the source code to check for syntax errors or unintentional typos in code. 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build App frontend
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build App Backend
          command: |
              cd  backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

# Testing Phase checking if the code being build ready for deployment is trusted
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-tested-build]
      - run:
          name: Frontend Testing
          command: |
              cd frontend
              npm install oauth-sign@^0.9.0
              npm install
              npm run test
                
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-tested-build]
        - run:
            name: Backend Testing
            command: |
                cd backend
                npm install
                npm run test

#Analyzing the code to check for any vulnerability or any other risk
  scan-frontend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-tested-build
      - run:
          name: Analyze App frontent
          command: |
              cd  frontend
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
             
              
  scan-backend:
    docker:
          - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-tested-build]
        - run:
            name: Analyze Backend App
            command: |
              cd  backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
     
#   deploy-infrastructure:
#     docker:
#      - image: cimg/base:2020.01
#     steps:
#       - checkout
#       - aws-cli/setup
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags project=udapeople \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --filters "Name=tag:project,Values=udapeople" \
#             --output text >> .circleci/ansible/inventory.txt
#             cat .circleci/ansible/inventory.txt

#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt


#   configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ['dd:e1:30:fe:0f:2f:b3:4b:3f:1b:bb:fb:1e:6a:28:44']
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible # install the dependencies needed for your playbook
#             cat .circleci/ansible/inventory.txt

#       - run:
#           name: Configure server
#           command: |
#             echo ENVIRONMENT=production > "backend/.env"
#             echo TYPEORM_CONNECTION=postgres >> "backend/.env"
#             echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
#             echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
#             echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
#             echo NODE_ENV=production >> "backend/.env"
#             echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
#             echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
#             ansible-playbook \
#               -i .circleci/ansible/inventory.txt \
#               .circleci/ansible/configure-server.yml
  
#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       - aws-cli/setup
#       - run:
#           name: Run migrations
#           command: |
#             echo ENVIRONMENT=production > "backend/.env"
#             echo TYPEORM_CONNECTION=postgres >> "backend/.env"
#             echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
#             echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
#             echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
#             echo NODE_ENV=production >> "backend/.env"
#             echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
#             echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
#             cd backend
#             sudo npm install
#             npm audit fix --audit-level=critical --force
#             npm run build
#             sudo npm run migrations > migration.log
#             cat migration.log
#             migration_succesful=$(cat migration.log | grep -c "has been executed successfully")
#             if [ $migration_succesful > 0 ]; then exit 0; else exit 1; fi;
#       - run:
#           name: Send migration status to kvdb.io OR memstash.io
#           command: |   
#               if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
#               then
#                   # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
#                   curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#                   # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
#                   curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#               fi

#   deploy-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             cd frontend
#             sudo npm install webpack-dev-server -g
#             sudo npm install
#       - run:
#           name: Get backend url
#           command: |
#             export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo ENVIRONMENT=production > "frontend/.env"
#             echo NODE_ENV=production >> "frontend/.env"
#             echo API_URL=$API_URL >> "frontend/.env"
#             echo $API_URL
#       - run:
#           name: Build frontend
#           command: |
#             cd frontend
#             ls -la
#             cat .env
#             npm run build
#       - aws-cli/setup
#       - run:
#           name: Deploy frontend objects
#           command: |
#             aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
#       # - revert-migrations
#       # - destroy-environment

#   deploy-backend:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["5f:7b:d4:d7:d8:88:61:0b:21:eb:b9:cc:cd:ed:53:c1"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible openssh-client tar gzip
#       - restore_cache:
#           keys: ["backend-dist"]  # -<< pipeline.id >>
#       - run:
#           name: Deploy backend
#           command: |
#             cd /home
#             tar czf backend.tar.gz -P /home/circleci/project/backend/dist
#       - run:
#           name: Deploy backend 2
#           command: |
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             ansible-playbook \
#               -i .circleci/ansible/inventory.txt \
#               .circleci/ansible/deploy-backend.yml
#       - run:
#           name: Install AWS CLI for rollback
#           when: on_fail
#           command: |
#             apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - notify:
      #     context: slack-secrets