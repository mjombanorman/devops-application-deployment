version: '2.1'
orbs:
  # slack: circleci/slack@4.1
  aws-cli: circleci/aws-cli@1.3.0
jobs:
  # notify:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #     - slack/notify:
  #         custom: |
  #           {
  #             "blocks": [
  #               {
  #                 "type": "section",
  #                 "fields": [
  #                   {
  #                     "type": "plain_text",
  #                     "text": "*This is a text notification*",
  #                     "emoji": true
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #         event: always

# build phase is to compile/lint the source code to check for syntax errors or unintentional typos in code. 
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build App frontend
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build App Backend
          command: |
              cd  backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

# Testing Phase checking if the code being build ready for deployment is trusted
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-tested-build]
      - run:
          name: Frontend Testing
          command: |
              cd frontend
              npm install oauth-sign@^0.9.0
              npm install
              npm run test
                
  test-backend:
    docker:
        - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-tested-build]
        - run:
            name: Backend Testing
            command: |
                cd backend
                npm install
                npm run test

#Analyzing the code to check for any vulnerability or any other risk
  scan-frontend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-tested-build
      - run:
          name: Analyze App frontent
          command: |
              cd  frontend
              npm audit fix --audit-level=critical --force
              
  scan-backend:
    docker:
          - image: circleci/node:13.8.0
    steps:
        - checkout
        - restore_cache:
            keys: [backend-tested-build]
        - run:
            name: Analyze Backend App
            command: |
              cd  backend
              npm audit fix --audit-level=critical --force
     
  deploy-infrastructure:
    docker:
     - image: cimg/base:2020.01
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      # - notify:
      #     context: slack-secrets